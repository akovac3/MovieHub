{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adnak\\\\Downloads\\\\NWT-projekat\\\\fe-moviehub\\\\src\\\\CreateMovie\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport Multiselect from \"multiselect-react-dropdown\";\nimport React, { useState, useEffect } from \"react\";\nimport { getAllGenres } from '../Api/Movie/movie';\nimport { getActors } from '../Api/Movie/movie';\nimport { MenuProps, useStyles, options } from \"../Components/utils\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport { message } from \"antd\";\nimport './CreateMovie.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CreateMovie() {\n  _s();\n\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [year, setYear] = useState('');\n  const [image, setImage] = useState('');\n  const [submitted, setSubmitted] = useState(false);\n  const [valid, setValid] = useState(false);\n  const [actors, setActors] = useState([\"Christian Bale\", \"Brad Pitt\", \"Morgan Freeman\"]);\n  const [genres, setGenres] = useState([]);\n  const [selectedGenres, setSelectedGenres] = useState([]);\n  const classes = useStyles();\n  const [selected, setSelected] = useState([]);\n  const isAllSelected = actors.length > 0 && selected.length === actors.length;\n  const isAllSelectedGenres = genres.length > 0 && selectedGenres.length === genres.length;\n\n  const handleChange = event => {\n    const value = event.target.value;\n\n    if (value[value.length - 1] === \"all\") {\n      setSelected(selected.length === actors.length ? [] : actors.map(actor => actor.id));\n      return;\n    }\n\n    setSelected(value);\n  };\n\n  const handleChangeGenres = event => {\n    const value = event.target.value;\n\n    if (value[value.length - 1] === \"all\") {\n      setSelectedGenres(selectedGenres.length === genres.length ? [] : genres.map(genre => genre.id));\n      return;\n    }\n\n    setSelectedGenres(value);\n  };\n\n  function handleSubimiting() {\n    setTitle('');\n    setYear('');\n    setDescription('');\n    setSelected([]);\n    setSelectedGenres([]);\n    setImage('');\n    setSubmitted(false);\n  }\n\n  const onFinish = async values => {\n    try {\n      setLoading(true);\n      const response = await postMovie(values);\n      message.success('Successfully saved movie');\n      setLoading(false);\n      handleSubimiting();\n    } catch (error) {\n      console.log(error);\n      setLoading(false);\n      message.warning(error.response.data.message);\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (title && year && description) {\n      setValid(true);\n      setSubmitted(true);\n      const values = {\n        title: title,\n        description: description,\n        year: year,\n        image: image,\n        actors: selected,\n        genres: selectedGenres\n      };\n      onFinish(values);\n    }\n  };\n\n  const getData = async () => {\n    try {\n      return await getAllGenres();\n    } catch (error) {\n      console.log(error);\n      console.warning(error.response.data.message);\n    }\n  };\n\n  const getActor = async () => {\n    try {\n      return await getActors();\n    } catch (error) {\n      console.log(error);\n      console.warning(error.response.data.message);\n    }\n  };\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const response = await getData();\n        console.log(response);\n        setGenres(response);\n        const glumci = await getActor();\n        setActors(glumci);\n      } catch (e) {\n        console.error(e);\n      }\n    }\n\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"form-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Create new Movie\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      class: \"register-form\",\n      onSubmit: handleSubmit,\n      children: [submitted && valid ? message.success(\"Successfully added movie\") : null, /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: e => {\n          setTitle(e.target.value);\n        },\n        value: title,\n        id: \"movie-title\",\n        class: \"form-field\",\n        type: \"text\",\n        placeholder: \"Title\",\n        name: \"title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 13\n      }, this), submitted && !title ? /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"title-error\",\n        children: \"Please enter a movie title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 36\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: e => {\n          setYear(e.target.value);\n        },\n        value: year,\n        id: \"movie-year\",\n        class: \"form-field\",\n        type: \"text\",\n        placeholder: \"Year\",\n        name: \"year\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 13\n      }, this), submitted && year === 0 ? /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"year-error\",\n        children: \"Please enter a movie year\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 38\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: e => {\n          setDescription(e.target.value);\n        },\n        value: description,\n        id: \"movie-description\",\n        class: \"form-field\",\n        type: \"text\",\n        placeholder: \"Description\",\n        name: \"description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 13\n      }, this), submitted && !description ? /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"year-error\",\n        children: \"Please enter a movie description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 44\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: e => {\n          setImage(e.target.value);\n        },\n        value: image,\n        id: \"movie-image\",\n        class: \"form-field\",\n        type: \"text\",\n        placeholder: \"Image\",\n        name: \"image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n        className: classes.formControl,\n        children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n          id: \"mutiple-select-label\",\n          children: \"Select actors\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          labelId: \"mutiple-select-label\",\n          multiple: true,\n          value: selected,\n          onChange: handleChange,\n          renderValue: selected => selected.join(\", \"),\n          MenuProps: MenuProps,\n          children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n            value: \"all\",\n            classes: {\n              root: isAllSelected ? classes.selectedAll : \"\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n              children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                classes: {\n                  indeterminate: classes.indeterminateColor\n                },\n                checked: isAllSelected,\n                indeterminate: selected.length > 0 && selected.length < actors.length\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 200,\n                columnNumber: 13\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n              classes: {\n                primary: classes.selectAllText\n              },\n              primary: \"Select All\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 9\n          }, this), actors.map(option => /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: option.id,\n            children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n              children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                checked: selected.indexOf(option.id) > -1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n              primary: option.firstName + ' ' + option.lastName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 13\n            }, this)]\n          }, option.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 11\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n        className: classes.formControl,\n        children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n          id: \"mutiple-select-genres\",\n          children: \"Select genres\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          labelId: \"mutiple-select-genres\",\n          multiple: true,\n          value: selectedGenres,\n          onChange: handleChangeGenres,\n          renderValue: selectedGenres => selectedGenres.join(\", \"),\n          MenuProps: MenuProps,\n          children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n            value: \"all\",\n            classes: {\n              root: isAllSelectedGenres ? classes.selectedAll : \"\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n              children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                classes: {\n                  indeterminate: classes.indeterminateColor\n                },\n                checked: isAllSelectedGenres,\n                indeterminate: selectedGenres.length > 0 && selectedGenres.length < genres.length\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 13\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n              classes: {\n                primary: classes.selectAllText\n              },\n              primary: \"Select All\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 9\n          }, this), genres.map(option => /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: option.id,\n            children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n              children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                checked: selectedGenres.indexOf(option.id) > -1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 257,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n              primary: option.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 13\n            }, this)]\n          }, option.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 11\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        class: \"form-field\",\n        type: \"submit\",\n        children: \"Add Movie\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CreateMovie, \"IQlTC5j5JMo4LJQJPjuyeFiafrE=\", false, function () {\n  return [useStyles];\n});\n\n_c = CreateMovie;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateMovie\");","map":{"version":3,"sources":["C:/Users/adnak/Downloads/NWT-projekat/fe-moviehub/src/CreateMovie/index.js"],"names":["Multiselect","React","useState","useEffect","getAllGenres","getActors","MenuProps","useStyles","options","Checkbox","InputLabel","ListItemIcon","ListItemText","MenuItem","FormControl","Select","message","CreateMovie","title","setTitle","description","setDescription","year","setYear","image","setImage","submitted","setSubmitted","valid","setValid","actors","setActors","genres","setGenres","selectedGenres","setSelectedGenres","classes","selected","setSelected","isAllSelected","length","isAllSelectedGenres","handleChange","event","value","target","map","actor","id","handleChangeGenres","genre","handleSubimiting","onFinish","values","setLoading","response","postMovie","success","error","console","log","warning","data","handleSubmit","preventDefault","getData","getActor","fetchData","glumci","e","formControl","join","root","selectedAll","indeterminate","indeterminateColor","primary","selectAllText","option","indexOf","firstName","lastName","name"],"mappings":"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","sourcesContent":["import Multiselect from \"multiselect-react-dropdown\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { getAllGenres } from '../Api/Movie/movie'\r\nimport { getActors } from '../Api/Movie/movie'\r\nimport { MenuProps, useStyles, options } from \"../Components/utils\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport { message } from \"antd\";\r\nimport './CreateMovie.css'\r\n\r\n\r\nexport default function CreateMovie() {\r\n\r\n   const [title, setTitle] = useState('');\r\n   const [description, setDescription] = useState('');\r\n   const [year, setYear] = useState('');\r\n   const [image, setImage] = useState('');\r\n    const [submitted, setSubmitted] = useState(false);\r\n    const [valid, setValid] = useState(false);\r\n    const [actors, setActors] = useState([\"Christian Bale\", \"Brad Pitt\", \"Morgan Freeman\"]);\r\n    const [genres, setGenres] = useState([]);\r\n    const [selectedGenres, setSelectedGenres] = useState([]);\r\n   const classes = useStyles();\r\n  const [selected, setSelected] = useState([]);\r\n  const isAllSelected =\r\n    actors.length > 0 && selected.length === actors.length;\r\n    const isAllSelectedGenres =\r\n    genres.length > 0 && selectedGenres.length === genres.length;\r\n\r\n  const handleChange = (event) => {\r\n    const value = event.target.value;\r\n    if (value[value.length - 1] === \"all\") {\r\n      setSelected(selected.length === actors.length ? [] : actors.map(actor => actor.id));\r\n      return;\r\n    }\r\n    setSelected(value);\r\n  };\r\n\r\n  const handleChangeGenres = (event)  => {\r\n    const value = event.target.value;\r\n    if (value[value.length - 1] === \"all\") {\r\n      setSelectedGenres(selectedGenres.length === genres.length ? [] : genres.map(genre => genre.id));\r\n      return;\r\n    }\r\n    setSelectedGenres(value);\r\n  };\r\n\r\n  function handleSubimiting() {\r\n    setTitle('')\r\n    setYear('')\r\n    setDescription('')\r\n    setSelected([])\r\n    setSelectedGenres([])\r\n    setImage('')\r\n    setSubmitted(false)\r\n  }\r\n\r\n  \r\n  const onFinish = async (values) => {\r\n    try {\r\n      setLoading(true)\r\n\r\n      const response = await postMovie(values)\r\n      message.success('Successfully saved movie')\r\n      setLoading(false)\r\n      handleSubimiting()\r\n    } catch (error) {\r\n      console.log(error)\r\n\r\n      setLoading(false)\r\n      message.warning(error.response.data.message)\r\n    }\r\n  }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if(title && year && description ) {\r\n            setValid(true);\r\n            setSubmitted(true);\r\n            const values = {\r\n              title: title,\r\n              description: description,\r\n              year: year,\r\n              image: image,\r\n              actors: selected,\r\n              genres: selectedGenres\r\n            }\r\n            onFinish(values)\r\n            \r\n        }\r\n    }\r\n\r\n    \r\n  const getData = async () => {\r\n    try {\r\n      return await getAllGenres()\r\n    } catch (error) {\r\n      console.log(error)\r\n      console.warning(error.response.data.message)\r\n    }\r\n  }\r\n\r\n  \r\n  const getActor = async () => {\r\n    try {\r\n      return await getActors()\r\n    } catch (error) {\r\n      console.log(error)\r\n      console.warning(error.response.data.message)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n        try {\r\n          const response = await getData()\r\n          console.log(response)\r\n          setGenres(response)\r\n          const glumci = await getActor()\r\n          setActors(glumci)\r\n        } catch (e) {\r\n          console.error(e)\r\n        }\r\n    }\r\n    fetchData()\r\n  }, [])\r\n\r\n\r\n    return (\r\n        <div class=\"form-container\">\r\n        <h1>Create new Movie</h1>\r\n        <form class=\"register-form\" onSubmit={handleSubmit}>\r\n            {/* Uncomment the next line to show the success message */}\r\n            {submitted && valid ? message.success(\"Successfully added movie\") : null}\r\n            <input\r\n                onChange={(e) => {setTitle(e.target.value)}}\r\n                value={title}\r\n                id=\"movie-title\"\r\n                class=\"form-field\"\r\n                type=\"text\"\r\n                placeholder=\"Title\"\r\n                name=\"title\"\r\n            />\r\n            {/* Uncomment the next line to show the error message */}\r\n            {submitted && !title ? <span id=\"title-error\">Please enter a movie title</span> : null}\r\n            <input\r\n                onChange={(e) => {setYear(e.target.value)}}\r\n                value={year}\r\n                id=\"movie-year\"\r\n                class=\"form-field\"\r\n                type=\"text\"\r\n                placeholder=\"Year\"\r\n                name=\"year\"\r\n            />\r\n            {/* Uncomment the next line to show the error message */}\r\n            {submitted && year===0 ? <span id=\"year-error\">Please enter a movie year</span> : null}\r\n            <input\r\n                onChange={(e) => {setDescription(e.target.value)}}\r\n                value={description}\r\n                id=\"movie-description\"\r\n                class=\"form-field\"\r\n                type=\"text\"\r\n                placeholder=\"Description\"\r\n                name=\"description\"\r\n            />\r\n              {submitted && !description ? <span id=\"year-error\">Please enter a movie description</span> : null}\r\n\r\n              <input\r\n                onChange={(e) => {setImage(e.target.value)}}\r\n                value={image}\r\n                id=\"movie-image\"\r\n                class=\"form-field\"\r\n                type=\"text\"\r\n                placeholder=\"Image\"\r\n                name=\"image\"\r\n            />\r\n\r\n            <FormControl className={classes.formControl}>\r\n      <InputLabel id=\"mutiple-select-label\">Select actors</InputLabel>\r\n      <Select\r\n        labelId=\"mutiple-select-label\"\r\n        multiple\r\n        value={selected}\r\n        onChange={handleChange}\r\n        renderValue={(selected) => selected.join(\", \")}\r\n        MenuProps={MenuProps}\r\n      >\r\n        <MenuItem\r\n          value=\"all\"\r\n          classes={{\r\n            root: isAllSelected ? classes.selectedAll : \"\"\r\n          }}\r\n        >\r\n          <ListItemIcon>\r\n            <Checkbox\r\n              classes={{ indeterminate: classes.indeterminateColor }}\r\n              checked={isAllSelected}\r\n              indeterminate={\r\n                selected.length > 0 && selected.length < actors.length\r\n              }\r\n            />\r\n          </ListItemIcon>\r\n          <ListItemText\r\n            classes={{ primary: classes.selectAllText }}\r\n            primary=\"Select All\"\r\n          />\r\n        </MenuItem>\r\n        {actors.map((option) => (\r\n          <MenuItem key={option.id} value={option.id}>\r\n            <ListItemIcon>\r\n              <Checkbox checked={selected.indexOf(option.id) > -1} />\r\n            </ListItemIcon>\r\n            <ListItemText primary={option.firstName + ' ' + option.lastName} />\r\n          </MenuItem>\r\n        ))}\r\n      </Select>\r\n    </FormControl>\r\n\r\n    <FormControl className={classes.formControl}>\r\n      <InputLabel id=\"mutiple-select-genres\">Select genres</InputLabel>\r\n      <Select\r\n        labelId=\"mutiple-select-genres\"\r\n        multiple\r\n        value={selectedGenres}\r\n        onChange={handleChangeGenres}\r\n        renderValue={(selectedGenres) => selectedGenres.join(\", \")}\r\n        MenuProps={MenuProps}\r\n      >\r\n        <MenuItem\r\n          value=\"all\"\r\n          classes={{\r\n            root: isAllSelectedGenres ? classes.selectedAll : \"\"\r\n          }}\r\n        >\r\n          <ListItemIcon>\r\n            <Checkbox\r\n              classes={{ indeterminate: classes.indeterminateColor }}\r\n              checked={isAllSelectedGenres}\r\n              indeterminate={\r\n                selectedGenres.length > 0 && selectedGenres.length < genres.length\r\n              }\r\n            />\r\n          </ListItemIcon>\r\n          <ListItemText\r\n            classes={{ primary: classes.selectAllText }}\r\n            primary=\"Select All\"\r\n          />\r\n        </MenuItem>\r\n        {genres.map((option) => (\r\n          <MenuItem key={option.id} value={option.id}>\r\n            <ListItemIcon>\r\n              <Checkbox checked={selectedGenres.indexOf(option.id) > -1} />\r\n            </ListItemIcon>\r\n            <ListItemText primary={option.name} />\r\n          </MenuItem>\r\n        ))}\r\n      </Select>\r\n    </FormControl>\r\n            <button class=\"form-field\" type=\"submit\">\r\n            Add Movie\r\n            </button>\r\n        </form>\r\n        </div>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}