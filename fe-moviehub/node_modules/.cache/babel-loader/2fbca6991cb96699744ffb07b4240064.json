{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adnak\\\\Downloads\\\\NWT-projekat\\\\fe-moviehub\\\\src\\\\CreateMovie\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport Multiselect from \"multiselect-react-dropdown\";\nimport React, { useState, useEffect } from \"react\";\nimport { getAllGenres } from '../Api/Movie/movie';\nimport { getActors } from '../Api/Movie/movie';\nimport { MenuProps, useStyles, options } from \"../Components/utils\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CreateMovie() {\n  _s();\n\n  const [values, setValues] = useState({\n    title: \"\",\n    year: \"\",\n    description: \"\",\n    actors: \"\"\n  });\n  const [submitted, setSubmitted] = useState(false);\n  const [valid, setValid] = useState(false);\n  const [actors, setActors] = useState([\"Christian Bale\", \"Brad Pitt\", \"Morgan Freeman\"]);\n  const [genre, setGenre] = useState([\"Action\", \"Comedy\", \"Thriller\"]);\n  const [genres, setGenres] = useState([]);\n  const [selectedActors, setSelectedActors] = useState([]);\n  const [selectedGenres, setSelectedGenres] = useState([]);\n  const classes = useStyles();\n  const [selected, setSelected] = useState([]);\n  const isAllSelected = actors.length > 0 && selected.length === actors.length;\n\n  const handleChange = event => {\n    const value = event.target.value;\n\n    if (value[value.length - 1] === \"all\") {\n      setSelected(selected.length === actors.length ? [] : actors);\n      return;\n    }\n\n    setSelected(value);\n  };\n\n  const handleMovieTitleInputChange = event => {\n    setValues({ ...values,\n      title: event.target.value\n    });\n  };\n\n  const handleMovieYearInputChange = event => {\n    setValues({ ...values,\n      year: event.target.value\n    });\n  };\n\n  const handleMovieDescriptionInputChange = event => {\n    setValues({ ...values,\n      description: event.target.value\n    });\n  };\n\n  const handleMovieActorsInputChange = event => {\n    setValues({ ...values,\n      actors: event.target.value\n    });\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (values.title && values.year && values.description && values.actors) {\n      setValid(true);\n    }\n\n    setSubmitted(true);\n  };\n\n  const getData = async () => {\n    try {\n      return await getAllGenres();\n    } catch (error) {\n      console.log(error);\n      console.warning(error.response.data.message);\n    }\n  };\n\n  const getActor = async () => {\n    try {\n      return await getActors();\n    } catch (error) {\n      console.log(error);\n      console.warning(error.response.data.message);\n    }\n  };\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const response = await getData();\n        console.log(response);\n        setGenres(response);\n        const glumci = await getActor();\n        setActors(glumci);\n      } catch (e) {\n        console.error(e);\n      }\n    }\n\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"form-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Create new Movie\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      class: \"register-form\",\n      onSubmit: handleSubmit,\n      children: [submitted && valid ? /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"success-message\",\n        children: \"Success! Thank you for adding new movie\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 35\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: handleMovieTitleInputChange,\n        value: values.title,\n        id: \"movie-title\",\n        class: \"form-field\",\n        type: \"text\",\n        placeholder: \"Title\",\n        name: \"title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }, this), submitted && !values.title ? /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"title-error\",\n        children: \"Please enter a movie title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 43\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: handleMovieYearInputChange,\n        value: values.year,\n        id: \"movie-year\",\n        class: \"form-field\",\n        type: \"text\",\n        placeholder: \"Year\",\n        name: \"year\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 13\n      }, this), submitted && !values.year ? /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"year-error\",\n        children: \"Please enter a movie year\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 42\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: handleMovieDescriptionInputChange,\n        value: values.description,\n        id: \"movie-description\",\n        class: \"form-field\",\n        type: \"text\",\n        placeholder: \"Description\",\n        name: \"description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 13\n      }, this), submitted && !values.description ? /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"description-error\",\n        children: \"Please enter a movie description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 49\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: handleMovieActorsInputChange,\n        value: values.actors,\n        id: \"movie-actors\",\n        class: \"form-field\",\n        type: \"text\",\n        placeholder: \"Actors\",\n        name: \"actors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 13\n      }, this), submitted && !values.actors ? /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"actors-error\",\n        children: \"Please enter a movie actors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 44\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Select actors\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Multiselect, {\n          isObject: false,\n          onRemove: function noRefCheck() {},\n          onSelect: function noRefCheck() {},\n          options: actors.map(actor => actor.firstName + \" \" + actor.lastName)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Select genres\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Multiselect, {\n          isObject: false,\n          onRemove: function noRefCheck() {},\n          onSelect: function noRefCheck() {},\n          options: genres.map(genre => genre.name)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        class: \"form-field\",\n        type: \"submit\",\n        children: \"Add Movie\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n      className: classes.formControl,\n      children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n        id: \"mutiple-select-label\",\n        children: \"Multiple Select\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        labelId: \"mutiple-select-label\",\n        multiple: true,\n        value: selected,\n        onChange: handleChange,\n        renderValue: selected => selected.join(\", \"),\n        MenuProps: MenuProps,\n        children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n          value: \"all\",\n          classes: {\n            root: isAllSelected ? classes.selectedAll : \"\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n            children: /*#__PURE__*/_jsxDEV(Checkbox, {\n              classes: {\n                indeterminate: classes.indeterminateColor\n              },\n              checked: isAllSelected,\n              indeterminate: selected.length > 0 && selected.length < options.length\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n            classes: {\n              primary: classes.selectAllText\n            },\n            primary: \"Select All\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 9\n        }, this), actors.map(option => /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: option.firstName + ' ' + option.lastName,\n          children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n            children: /*#__PURE__*/_jsxDEV(Checkbox, {\n              checked: selected.indexOf(option) > -1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n            primary: option.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 13\n          }, this)]\n        }, option.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CreateMovie, \"yw4Q7bBj7jnD2LW6jv5KnY0yhI0=\", false, function () {\n  return [useStyles];\n});\n\n_c = CreateMovie;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateMovie\");","map":{"version":3,"sources":["C:/Users/adnak/Downloads/NWT-projekat/fe-moviehub/src/CreateMovie/index.js"],"names":["Multiselect","React","useState","useEffect","getAllGenres","getActors","MenuProps","useStyles","options","Checkbox","InputLabel","ListItemIcon","ListItemText","MenuItem","FormControl","Select","CreateMovie","values","setValues","title","year","description","actors","submitted","setSubmitted","valid","setValid","setActors","genre","setGenre","genres","setGenres","selectedActors","setSelectedActors","selectedGenres","setSelectedGenres","classes","selected","setSelected","isAllSelected","length","handleChange","event","value","target","handleMovieTitleInputChange","handleMovieYearInputChange","handleMovieDescriptionInputChange","handleMovieActorsInputChange","handleSubmit","preventDefault","getData","error","console","log","warning","response","data","message","getActor","fetchData","glumci","e","noRefCheck","map","actor","firstName","lastName","name","formControl","join","root","selectedAll","indeterminate","indeterminateColor","primary","selectAllText","option","indexOf","id"],"mappings":"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","sourcesContent":["import Multiselect from \"multiselect-react-dropdown\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { getAllGenres } from '../Api/Movie/movie'\r\nimport { getActors } from '../Api/Movie/movie'\r\nimport { MenuProps, useStyles, options } from \"../Components/utils\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\n\r\n\r\nexport default function CreateMovie() {\r\n\r\n    const [values, setValues] = useState({\r\n        title: \"\",\r\n        year: \"\",\r\n        description: \"\",\r\n        actors: \"\"\r\n    });\r\n    const [submitted, setSubmitted] = useState(false);\r\n    const [valid, setValid] = useState(false);\r\n    const [actors, setActors] = useState([\"Christian Bale\", \"Brad Pitt\", \"Morgan Freeman\"]);\r\n    const [genre, setGenre] = useState([\"Action\", \"Comedy\", \"Thriller\"]);\r\n    const [genres, setGenres] = useState([]);\r\n    const [selectedActors, setSelectedActors] = useState([]);\r\n    const [selectedGenres, setSelectedGenres] = useState([]);\r\n   const classes = useStyles();\r\n  const [selected, setSelected] = useState([]);\r\n  const isAllSelected =\r\n    actors.length > 0 && selected.length === actors.length;\r\n\r\n  const handleChange = (event) => {\r\n    const value = event.target.value;\r\n    if (value[value.length - 1] === \"all\") {\r\n      setSelected(selected.length === actors.length ? [] : actors);\r\n      return;\r\n    }\r\n    setSelected(value);\r\n  };\r\n\r\n    const handleMovieTitleInputChange = (event) => {\r\n        setValues({...values, title: event.target.value})\r\n    }\r\n\r\n    const handleMovieYearInputChange = (event) => {\r\n        setValues({...values, year: event.target.value})\r\n    }\r\n\r\n    const handleMovieDescriptionInputChange = (event) => {\r\n        setValues({...values, description: event.target.value})\r\n    }\r\n\r\n    const handleMovieActorsInputChange = (event) => {\r\n        setValues({...values, actors: event.target.value})\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if(values.title && values.year && values.description && values.actors) {\r\n            setValid(true);\r\n        }\r\n        setSubmitted(true);\r\n    }\r\n\r\n    \r\n  const getData = async () => {\r\n    try {\r\n      return await getAllGenres()\r\n    } catch (error) {\r\n      console.log(error)\r\n      console.warning(error.response.data.message)\r\n    }\r\n  }\r\n\r\n  \r\n  const getActor = async () => {\r\n    try {\r\n      return await getActors()\r\n    } catch (error) {\r\n      console.log(error)\r\n      console.warning(error.response.data.message)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n        try {\r\n          const response = await getData()\r\n          console.log(response)\r\n          setGenres(response)\r\n          const glumci = await getActor()\r\n          setActors(glumci)\r\n        } catch (e) {\r\n          console.error(e)\r\n        }\r\n    }\r\n    fetchData()\r\n  }, [])\r\n\r\n\r\n    return (\r\n        <div class=\"form-container\">\r\n        <h1>Create new Movie</h1>\r\n        <form class=\"register-form\" onSubmit={handleSubmit}>\r\n            {/* Uncomment the next line to show the success message */}\r\n            {submitted && valid ? <div class=\"success-message\">Success! Thank you for adding new movie</div> : null}\r\n            <input\r\n                onChange={handleMovieTitleInputChange}\r\n                value={values.title}\r\n                id=\"movie-title\"\r\n                class=\"form-field\"\r\n                type=\"text\"\r\n                placeholder=\"Title\"\r\n                name=\"title\"\r\n            />\r\n            {/* Uncomment the next line to show the error message */}\r\n            {submitted && !values.title ? <span id=\"title-error\">Please enter a movie title</span> : null}\r\n            <input\r\n                onChange={handleMovieYearInputChange}\r\n                value={values.year}\r\n                id=\"movie-year\"\r\n                class=\"form-field\"\r\n                type=\"text\"\r\n                placeholder=\"Year\"\r\n                name=\"year\"\r\n            />\r\n            {/* Uncomment the next line to show the error message */}\r\n            {submitted && !values.year ? <span id=\"year-error\">Please enter a movie year</span> : null}\r\n            <input\r\n                onChange={handleMovieDescriptionInputChange}\r\n                value={values.description}\r\n                id=\"movie-description\"\r\n                class=\"form-field\"\r\n                type=\"text\"\r\n                placeholder=\"Description\"\r\n                name=\"description\"\r\n            />\r\n            {/* Uncomment the next line to show the error message */}\r\n            {submitted && !values.description ? <span id=\"description-error\">Please enter a movie description</span> : null}\r\n            <input\r\n                onChange={handleMovieActorsInputChange}\r\n                value={values.actors}\r\n                id=\"movie-actors\"\r\n                class=\"form-field\"\r\n                type=\"text\"\r\n                placeholder=\"Actors\"\r\n                name=\"actors\"\r\n            />\r\n            {/* Uncomment the next line to show the error message */}\r\n            {submitted && !values.actors ? <span id=\"actors-error\">Please enter a movie actors</span> : null}\r\n            <div>\r\n            <p>Select actors</p>\r\n            <Multiselect\r\n                isObject={false}\r\n                onRemove={function noRefCheck() {}}\r\n                onSelect={function noRefCheck() {}}\r\n                options={actors.map((actor) => (actor.firstName + \" \" + actor.lastName\r\n                    ))}\r\n            />\r\n            </div>\r\n            <div>\r\n            <p>Select genres</p>\r\n            <Multiselect\r\n                isObject={false}\r\n                onRemove={function noRefCheck() {}}\r\n                onSelect={function noRefCheck() {}}\r\n                options= {genres.map((genre) => (genre.name\r\n                  ))}\r\n            />\r\n            </div>\r\n            <button class=\"form-field\" type=\"submit\">\r\n            Add Movie\r\n            </button>\r\n        </form>\r\n        <FormControl className={classes.formControl}>\r\n      <InputLabel id=\"mutiple-select-label\">Multiple Select</InputLabel>\r\n      <Select\r\n        labelId=\"mutiple-select-label\"\r\n        multiple\r\n        value={selected}\r\n        onChange={handleChange}\r\n        renderValue={(selected) => selected.join(\", \")}\r\n        MenuProps={MenuProps}\r\n      >\r\n        <MenuItem\r\n          value=\"all\"\r\n          classes={{\r\n            root: isAllSelected ? classes.selectedAll : \"\"\r\n          }}\r\n        >\r\n          <ListItemIcon>\r\n            <Checkbox\r\n              classes={{ indeterminate: classes.indeterminateColor }}\r\n              checked={isAllSelected}\r\n              indeterminate={\r\n                selected.length > 0 && selected.length < options.length\r\n              }\r\n            />\r\n          </ListItemIcon>\r\n          <ListItemText\r\n            classes={{ primary: classes.selectAllText }}\r\n            primary=\"Select All\"\r\n          />\r\n        </MenuItem>\r\n        {actors.map((option) => (\r\n          <MenuItem key={option.id} value={option.firstName + ' ' + option.lastName}>\r\n            <ListItemIcon>\r\n              <Checkbox checked={selected.indexOf(option) > -1} />\r\n            </ListItemIcon>\r\n            <ListItemText primary={option.id} />\r\n          </MenuItem>\r\n        ))}\r\n      </Select>\r\n    </FormControl>\r\n        </div>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}