{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport * as React from 'react';\n\nfunction getUseId() {\n  // We need fully clone React function here to avoid webpack warning React 17 do not export `useId`\n  var fullClone = _objectSpread({}, React);\n\n  return fullClone.useId;\n}\n\nvar uuid = 0;\n/** @private Note only worked in develop env. Not work in production. */\n\nexport function resetUuid() {\n  if (process.env.NODE_ENV !== 'production') {\n    uuid = 0;\n  }\n}\nexport default function useId(id) {\n  // Inner id for accessibility usage. Only work in client side\n  var _React$useState = React.useState('ssr-id'),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      innerId = _React$useState2[0],\n      setInnerId = _React$useState2[1];\n\n  var useOriginId = getUseId();\n  var reactNativeId = useOriginId === null || useOriginId === void 0 ? void 0 : useOriginId();\n  React.useEffect(function () {\n    if (!useOriginId) {\n      var nextId = uuid;\n      uuid += 1;\n      setInnerId(\"rc_unique_\".concat(nextId));\n    }\n  }, []); // Developer passed id is single source of truth\n\n  if (id) {\n    return id;\n  } // Test env always return mock id\n\n\n  if (process.env.NODE_ENV === 'test') {\n    return 'test-id';\n  } // Return react native id or inner id\n\n\n  return reactNativeId || innerId;\n}","map":{"version":3,"sources":["C:/Users/PC/Desktop/ETF/PNWT/NWT-projekat/fe-moviehub/node_modules/rc-util/es/hooks/useId.js"],"names":["_slicedToArray","_objectSpread","React","getUseId","fullClone","useId","uuid","resetUuid","process","env","NODE_ENV","id","_React$useState","useState","_React$useState2","innerId","setInnerId","useOriginId","reactNativeId","useEffect","nextId","concat"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,0CAA3B;AACA,OAAOC,aAAP,MAA0B,0CAA1B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;AAEA,SAASC,QAAT,GAAoB;AAClB;AACA,MAAIC,SAAS,GAAGH,aAAa,CAAC,EAAD,EAAKC,KAAL,CAA7B;;AAEA,SAAOE,SAAS,CAACC,KAAjB;AACD;;AAED,IAAIC,IAAI,GAAG,CAAX;AACA;;AAEA,OAAO,SAASC,SAAT,GAAqB;AAC1B,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCJ,IAAAA,IAAI,GAAG,CAAP;AACD;AACF;AACD,eAAe,SAASD,KAAT,CAAeM,EAAf,EAAmB;AAChC;AACA,MAAIC,eAAe,GAAGV,KAAK,CAACW,QAAN,CAAe,QAAf,CAAtB;AAAA,MACIC,gBAAgB,GAAGd,cAAc,CAACY,eAAD,EAAkB,CAAlB,CADrC;AAAA,MAEIG,OAAO,GAAGD,gBAAgB,CAAC,CAAD,CAF9B;AAAA,MAGIE,UAAU,GAAGF,gBAAgB,CAAC,CAAD,CAHjC;;AAKA,MAAIG,WAAW,GAAGd,QAAQ,EAA1B;AACA,MAAIe,aAAa,GAAGD,WAAW,KAAK,IAAhB,IAAwBA,WAAW,KAAK,KAAK,CAA7C,GAAiD,KAAK,CAAtD,GAA0DA,WAAW,EAAzF;AACAf,EAAAA,KAAK,CAACiB,SAAN,CAAgB,YAAY;AAC1B,QAAI,CAACF,WAAL,EAAkB;AAChB,UAAIG,MAAM,GAAGd,IAAb;AACAA,MAAAA,IAAI,IAAI,CAAR;AACAU,MAAAA,UAAU,CAAC,aAAaK,MAAb,CAAoBD,MAApB,CAAD,CAAV;AACD;AACF,GAND,EAMG,EANH,EATgC,CAexB;;AAER,MAAIT,EAAJ,EAAQ;AACN,WAAOA,EAAP;AACD,GAnB+B,CAmB9B;;;AAGF,MAAIH,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,MAA7B,EAAqC;AACnC,WAAO,SAAP;AACD,GAxB+B,CAwB9B;;;AAGF,SAAOQ,aAAa,IAAIH,OAAxB;AACD","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\r\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\r\nimport * as React from 'react';\r\n\r\nfunction getUseId() {\r\n  // We need fully clone React function here to avoid webpack warning React 17 do not export `useId`\r\n  var fullClone = _objectSpread({}, React);\r\n\r\n  return fullClone.useId;\r\n}\r\n\r\nvar uuid = 0;\r\n/** @private Note only worked in develop env. Not work in production. */\r\n\r\nexport function resetUuid() {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    uuid = 0;\r\n  }\r\n}\r\nexport default function useId(id) {\r\n  // Inner id for accessibility usage. Only work in client side\r\n  var _React$useState = React.useState('ssr-id'),\r\n      _React$useState2 = _slicedToArray(_React$useState, 2),\r\n      innerId = _React$useState2[0],\r\n      setInnerId = _React$useState2[1];\r\n\r\n  var useOriginId = getUseId();\r\n  var reactNativeId = useOriginId === null || useOriginId === void 0 ? void 0 : useOriginId();\r\n  React.useEffect(function () {\r\n    if (!useOriginId) {\r\n      var nextId = uuid;\r\n      uuid += 1;\r\n      setInnerId(\"rc_unique_\".concat(nextId));\r\n    }\r\n  }, []); // Developer passed id is single source of truth\r\n\r\n  if (id) {\r\n    return id;\r\n  } // Test env always return mock id\r\n\r\n\r\n  if (process.env.NODE_ENV === 'test') {\r\n    return 'test-id';\r\n  } // Return react native id or inner id\r\n\r\n\r\n  return reactNativeId || innerId;\r\n}"]},"metadata":{},"sourceType":"module"}